group 'ch.so.agi'
version '1.0.4'+System.getProperty('release','-SNAPSHOT')
version env('GRETL_VERSION', "$project.version")

ext {
    //dependency versions
    sqliteJdbcVersion = '3.8.11.2'
    derbyVersion = '10.13.1.1'
    jenkinsClientVersion = '0.3.7'

    // dependencies
    sqliteJdbcDependency = [group: 'org.xerial', name: 'sqlite-jdbc', version: sqliteJdbcVersion]
    derbyDependency = [group: 'org.apache.derby', name: 'derby', version: derbyVersion]
    jenkinsClientDependency = 'com.offbytwo.jenkins:jenkins-client:' + jenkinsClientVersion
}

repositories {
    maven {
        url "http://download.osgeo.org/webdav/geotools/"
    }
    mavenCentral()
    mavenLocal()
    maven {
        url "http://jars.interlis.ch"
    }
}

apply from: 'dependencies.gradle'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'

sourceSets {
    testIntegration
    testSystem
}

configurations.all {
    resolutionStrategy {
        force ioxIliDependency
    }
}

dependencies {
    testCompile junitDependency

    compile postgresqlDependency

    compile ilivalidatorDependency
    compile ili2pgDependency
    compile ioxWkfDependency
    compile ioxIliDependency

    compile sqliteJdbcDependency
    compile derbyDependency

    // Additional driver possibilities when the need arises:
    // - oracle jdbc driver
    // - sqlserver jdbc driver (Microsoft)
    compile gradleApi()

    testIntegrationCompile junitDependency

    testSystemCompile junitDependency
    testSystemCompile jenkinsClientDependency
}


sourceCompatibility = 1.8

test {
    exclude 'ch/so/agi/gretl/steps/**.*'

    //testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

publishing{
    publications{
        mavenJava(MavenPublication){
            from components.java
        }
    }
    repositories{
        maven{
            name 'AIO AGI Artifactory'
            url env('GRETL_JAR_URL')
            credentials {
                username env('GRETL_JAR_USER')
                password env('GRETL_JAR_PASS')
            }
        }
        maven{
            name 'Public'
            url System.getProperty('repos_url')
            credentials {
                username System.getProperty('repos_usr')
                password System.getProperty('repos_pwd')
            }
        }
    }
}

def env(environmentVariableName){
    return env(environmentVariableName, 'UNDEFINED')
}

def env(environmentVariableName, defaultValue){
    def var = System.getenv(environmentVariableName)
    if (var == null || var.length() == 0){
        var = defaultValue
    }
    return var;
}

task dbTest(type: Test, dependsOn: [compileJava, compileTestJava]) {
    exclude 'ch/so/agi/gretl/logging/**.*'
    exclude 'ch/so/agi/gretl/util/**.*'
    exclude 'ch/so/agi/gretl/testutil/**.*'

    // when Gradle forks a new Java process, it does not automatically pass the
    // environment variable values along to the new environment. One has to
    // explicitly pass these variables
    systemProperty 'dburl', System.getProperty('dburl')
    systemProperty 'dbusr', System.getProperty('dbusr','ddluser')
    systemProperty 'dbpwd', System.getProperty('dbpwd','ddluser')

    //testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

configure(dbTest) {
    group = 'Verification'
    description = 'Runs tests with dockered database'
}

task testIntegration(type: Test) {
    group = 'Verification'
    description = 'Runs integration tests'

    testClassesDirs = sourceSets.testIntegration.output.classesDirs
    classpath = sourceSets.testIntegration.runtimeClasspath
}

task testSystem(type: Test) {
    group = 'Verification'
    description = 'Runs system tests including Jenkins'

    testClassesDirs = sourceSets.testSystem.output.classesDirs
    classpath = sourceSets.testSystem.runtimeClasspath
}


/*
Anforderungen:
* Auch lokal ausführbar
* Möglichst auf der Kommandozeile ausführbar (IDE-Unabhängig)
* Nutzt für DB-Setup jdbc (gleiche Versionen wie GRETL selbst)
* Möglichst einfache Integration in IDE und Buildserver (Jenkins)


PG JUnit Tests:
* Geometrie schreiben
* Load test
* DBa lesen DBb schreiben (pg -> sqlite / sqlite -> db)

Integration Tests:
* Sonnenpfad
* Relatver Pfad zu build.gradle
* Taskverkettung in Build.gradle
* Rückgabetyp von gradle build
 */

/*
tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}
*/

/*
Ablauf für das Erstellen eines neue Release
* gradle build muss fehlerfrei durchlaufen
* jars auf snapshot deployen
* Integrationstests durchführen
* Versionsnummer anpassen (snapshot entfernen)
* jars auf release deployen
* Versionsnummer anpassen (auf snapshot folgeversion)
* Nutzer orientieren
 */
