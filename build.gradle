group 'ch.so.agi'
version '1.0.2-SNAPSHOT'
version env('GRETL_VERSION', '1.0.2-SNAPSHOT')

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "http://jars.interlis.ch"
    }
}

apply plugin: 'java'

apply plugin: 'maven'
apply plugin: 'maven-publish'
//apply plugin: 'findbugs'

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.1.3'
    //compile group: 'ch.interlis', name: 'ilivalidator', version: '1.5.+' 
    compile('ch.interlis:ilivalidator:1.5.+') {
    	exclude group: 'ch.interlis', module: 'iox-ili' // excluded, so that SNAPSHOT (see below) can be used
    }
    compile('ch.interlis:ili2pg:3.10.+'){
    	exclude group: 'ch.interlis', module: 'iox-ili' // excluded, so that SNAPSHOT (see below) can be used
    }
    compile group: 'ch.interlis', name: 'iox-ili', version: '1.19.+' // use SNAPSHOT
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.11.2'
    compile group: 'org.apache.derby', name: 'derby', version: '10.13.1.1'
    // Additional driver possibilities when the need arises:
    // - oracle jdbc driver
    // - sqlserver jdbc driver (Microsoft)
    compile gradleApi()
}

sourceCompatibility = 1.8


publishing{
    publications{
        mavenJava(MavenPublication){
            from components.java
        }
    }
    repositories{
        maven{
            name 'AIO AGI Artifactory'
            url env('GRETL_JAR_URL')
            credentials {
                username env('GRETL_JAR_USER')
                password env('GRETL_JAR_PASS')
            }
        }
    }
}

def env(environmentVariableName){
    return env(environmentVariableName, 'UNDEFINED')
}

def env(environmentVariableName, defaultValue){
    def var = System.getenv(environmentVariableName)
    if (var == null || var.length() == 0){
        var = defaultValue
    }
    return var;
}

/*
Anforderungen:
* Auch lokal ausführbar
* Möglichst auf der Kommandozeile ausführbar (IDE-Unabhängig)
* Nutzt für DB-Setup jdbc (gleiche Versionen wie GRETL selbst)
* Möglichst einfache Integration in IDE und Buildserver (Jenkins)


PG JUnit Tests:
* Geometrie schreiben
* Load test
* DBa lesen DBb schreiben (pg -> sqlite / sqlite -> db)

Integration Tests:
* Sonnenpfad
* Relatver Pfad zu build.gradle
* Taskverkettung in Build.gradle
* Rückgabetyp von gradle build
 */

/*
tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}
*/

/*
Ablauf für das Erstellen eines neue Release
* gradle build muss fehlerfrei durchlaufen
* jars auf snapshot deployen
* Integrationstests durchführen
* Versionsnummer anpassen (snapshot entfernen)
* jars auf release deployen
* Versionsnummer anpassen (auf snapshot folgeversion)
* Nutzer orientieren
 */

