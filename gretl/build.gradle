
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'java-gradle-plugin'

sourceCompatibility = 1.8
targetCompatibility = 1.8

apply from: '../dependencies.gradle'

//////////////////////////////
sourceSets {
    functionalTest {
        java.srcDir file('src/functionalTest/java')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

gradlePlugin {
	plugins {
		gretlPlugin {
			id = 'ch.so.agi.gretl'
			implementationClass = 'ch.so.agi.gretl.gradle.GretlPlugin'
		}
	}
}
//////////////////////////////

dependencies {
    testCompile junitDependency

    runtime postgresqlDependency

    compile ilivalidatorDependency
    compile(ili2pgDependency){
        exclude group: 'ch.ehi', module: 'ehisqlgen'
    }
    compile ioxWkfDependency
    compile ioxIliDependency
    compile ehiSqlGenDependency

    compile sqliteJdbcDependency
    compile derbyDependency
    compile oracleDependency
    	
    //compile gradleApi()
}

// 'gradle publishToMavenLocal' publishes
// oracle jdbc to local maven repo.
publishing {
	publications {
		maven(MavenPublication) {
			artifactId "ojdbc7"
			version "12.1.0.1"
			groupId "com.oracle"
			artifact file('./lib/ojdbc7-12.1.0.1.jar')
		}
	}
}

task jardist(type: Copy){
	delete fileTree('jardist')
	destinationDir = file('jardist')
	from jar
	from configurations.runtimeClasspath
	// version = '1.0.6'

}

// Transfer the required configuration variables to the unit test code.
// (The test code has no access to the -D or -P variables as it is executed in a separate jvm-process)
/*
tasks.withType(Test) {
    def GRETLTEST_DBURI = 'gretltest_dburi_pg'
    systemProperty(GRETLTEST_DBURI, findProperty(GRETLTEST_DBURI))
}
*/

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            name 'Public'
            url System.getProperty('repos_url')
            credentials {
                username System.getProperty('repos_usr')
                password System.getProperty('repos_pwd')
            }
        }
    }
}

//////////////////////////////
task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
	
	systemProperty('GRETL_TESTTYPE', 'jar')
	
	useJUnit {
		excludeCategories 'ch.so.agi.gretl.util.DbDriversReachableTest'
	}
	
	// show standard out and standard error of the test JVM(s) on the console
	testLogging.showStandardStreams = System.getenv('TRAVIS')=='true'

    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
	
    //mustRunAfter test
}

// Transfer the required configuration variables to all test code.
// (The test code has no access to the -D or -P variables as it is executed in a separate jvm-process)
tasks.withType(Test) {
	def GRETLTEST_DBURI_PG = 'gretltest_dburi_pg'
	systemProperty(GRETLTEST_DBURI_PG, findProperty(GRETLTEST_DBURI_PG))

	def GRETLTEST_DBURI_ORA = 'gretltest_dburi_ora'
	systemProperty(GRETLTEST_DBURI_ORA, findProperty(GRETLTEST_DBURI_ORA))

	println 'dburi_pg: ' + getSystemProperties().getAt(GRETLTEST_DBURI_PG)
	println 'dburi_ora: ' + getSystemProperties().getAt(GRETLTEST_DBURI_ORA)

	systemProperty('GRETL_INTTESTFOLDER_ABS_PATH', projectDir)
}
//////////////////////////////

