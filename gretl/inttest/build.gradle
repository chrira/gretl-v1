ext {
    jarDir = "$projectDir/../build/libs"
}
apply from: '../../dependencies.gradle'

allprojects {
    apply plugin: 'java'

    repositories {
		mavenLocal()
		maven {
			url "http://jars.interlis.ch"
		}
		maven {
			url "http://download.osgeo.org/webdav/geotools/"
		}
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()

		flatDir(dirs: '../lib')        
    }
}

sourceSets {
    testIntegration {
        compileClasspath += sourceSets.test.runtimeClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

dependencies{
    compile junitDependency
    runtime postgresqlDependency

    testIntegrationCompile junitDependency
    testIntegrationCompile ioxWkfDependency
}

task testJar(type: Test) {
    useJUnit {
        excludeCategories 'ch.so.agi.gretl.testutil.DbDriversReachableTest'
    }

    systemProperty('GRETL_TESTTYPE', 'jar')

    group = 'Verification'
    description = 'Runs integration tests against the gretl jar'
    
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = System.getenv('TRAVIS')=='true'
    
    ignoreFailures = Boolean.getBoolean("test.ignoreFailures")
    testClassesDirs = sourceSets.testIntegration.output.classesDirs
    classpath = sourceSets.testIntegration.runtimeClasspath
}

task testImage(type: Test){
    systemProperty('GRETL_TESTTYPE', 'image')

    group = 'Verification'
    description = 'Runs integration tests against the gretl jar'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = System.getenv('TRAVIS')=='true'

    ignoreFailures = Boolean.getBoolean("test.ignoreFailures")
    testClassesDirs = sourceSets.testIntegration.output.classesDirs
    classpath = sourceSets.testIntegration.runtimeClasspath
}

// Transfer the required configuration variables to the unit test code.
// (The test code has no access to the -D or -P variables as it is executed in a separate jvm-process)
tasks.withType(Test) {

    def GRETLTEST_DBURI_PG = 'gretltest_dburi_pg'
    systemProperty(GRETLTEST_DBURI_PG, findProperty(GRETLTEST_DBURI_PG))

    def GRETLTEST_DBURI_ORA = 'gretltest_dburi_ora'
    systemProperty(GRETLTEST_DBURI_ORA, findProperty(GRETLTEST_DBURI_ORA))

    println 'dburi_pg: ' + getSystemProperties().getAt(GRETLTEST_DBURI_PG)
    println 'dburi_ora: ' + getSystemProperties().getAt(GRETLTEST_DBURI_ORA)

    systemProperty('GRETL_INTTESTFOLDER_ABS_PATH', projectDir)
}
