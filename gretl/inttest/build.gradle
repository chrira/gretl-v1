ext {
    jarDir = "$projectDir/../build/libs"
}
apply from: '../../dependencies.gradle'

allprojects {
    apply plugin: 'java'

    repositories {
		mavenLocal()
		maven {
			url "http://jars.interlis.ch"
		}
		maven {
			url "http://download.osgeo.org/webdav/geotools/"
		}
		mavenCentral()
    }
}

sourceSets {
    testIntegration {
        compileClasspath += sourceSets.test.runtimeClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }

    testSystem {
        compileClasspath += sourceSets.test.runtimeClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

dependencies{
    compile junitDependency
    runtime postgresqlDependency

    testIntegrationCompile junitDependency
    testIntegrationCompile ioxWkfDependency

    testSystemCompile junitDependency
    testSystemCompile 'com.offbytwo.jenkins:jenkins-client:0.3.7'
}

task testIntegration(type: Test) {
    group = 'Verification'
    description = 'Runs integration tests'

    ignoreFailures = true
    testClassesDirs = sourceSets.testIntegration.output.classesDirs
    classpath = sourceSets.testIntegration.runtimeClasspath
}

task testSystem(type: Test) {
    group = 'Verification'
    description = 'Runs system tests including Jenkins'

    ignoreFailures = true
    testClassesDirs = sourceSets.testSystem.output.classesDirs
    classpath = sourceSets.testSystem.runtimeClasspath


    // when Gradle forks a new Java process, it does not automatically pass the
    // environment variable values along to the new environment. One has to
    // explicitly pass these variables
    systemProperty 'gretltest_jenkins_uri', System.getProperty('gretltest_jenkins_uri')
    systemProperty 'gretltest_jenkins_user', System.getProperty('gretltest_jenkins_user')
    systemProperty 'gretltest_jenkins_pwd', System.getProperty('gretltest_jenkins_pwd')
}

// Transfer the required configuration variables to the unit test code.
// (The test code has no access to the -D or -P variables as it is executed in a separate jvm-process)
tasks.withType(Test) {
    def GRETLTEST_DBURI = 'gretltest_dburi'
    systemProperty(GRETLTEST_DBURI ,(findProperty(GRETLTEST_DBURI) != null) ?
        findProperty(GRETLTEST_DBURI) : 'jdbc:postgresql://localhost:5432/gretl')
    println 'dburi: ' + getSystemProperties().getAt(GRETLTEST_DBURI)
}
